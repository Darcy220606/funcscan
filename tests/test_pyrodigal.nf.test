nextflow_pipeline {

    name "Test pipeline: NFCORE_FUNCSCAN"
    script "main.nf"
    tag "pipeline"
    tag "nfcore_funcscan"
    tag "test_pyrodigal"

    test("test_pyrodigal_profile") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert new File("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml").exists() },
                { assert new File("$outputDir/multiqc/multiqc_report.html").exists() },

                // AMPir
                { assert snapshot(
                    path("$outputDir/amp/ampir/sample_1_short/sample_1_short.ampir.tsv"),
                    path("$outputDir/amp/ampir/sample_1_short/sample_1_short.ampir.faa"),
                    path("$outputDir/amp/ampir/sample_2_short/sample_2_short.ampir.tsv"),
                    path("$outputDir/amp/ampir/sample_2_short/sample_2_short.ampir.faa"),
                    path("$outputDir/amp/ampir/sample_2_long/sample_2_long.ampir.tsv"),
                    path("$outputDir/amp/ampir/sample_2_long/sample_2_long.ampir.faa")
                ).match("ampir") },

                // AMPlify
                { assert snapshot(
                    path("$outputDir/amp/amplify/sample_1_short/sample_1_short.tsv"),
                    path("$outputDir/amp/amplify/sample_2_short/sample_2_short.tsv"),
                    path("$outputDir/amp/amplify/sample_2_long/sample_2_long.tsv")
                ).match("amplify") },

                // HMMsearch
                { assert new File("$outputDir/amp/hmmer_hmmsearch/sample_1_short/sample_1_short_mybacteriocin.txt.gz").exists() },
                { assert new File("$outputDir/amp/hmmer_hmmsearch/sample_2_short/sample_2_short_mybacteriocin.txt.gz").exists() },
                { assert new File("$outputDir/amp/hmmer_hmmsearch/sample_2_long/sample_2_long_mybacteriocin.txt.gz").exists() },

                // Macrel
                { assert snapshot(
                    path("$outputDir/amp/macrel/sample_1_short/sample_1_short.smorfs.faa.gz"),
                    path("$outputDir/amp/macrel/sample_2_short/sample_2_short.smorfs.faa.gz"),
                    path("$outputDir/amp/macrel/sample_2_long/sample_2_long.smorfs.faa.gz"),
                    path("$outputDir/amp/macrel/sample_1_short/sample_1_short.all_orfs.faa.gz"),
                    path("$outputDir/amp/macrel/sample_2_short/sample_2_short.all_orfs.faa.gz"),
                    path("$outputDir/amp/macrel/sample_2_long/sample_2_long.all_orfs.faa.gz"),
                    path("$outputDir/amp/macrel/sample_1_short/sample_1_short.prediction.gz"),
                    path("$outputDir/amp/macrel/sample_2_short/sample_2_short.prediction.gz"),
                    path("$outputDir/amp/macrel/sample_2_long/sample_2_long.prediction.gz"),
                    path("$outputDir/amp/macrel/sample_1_short/README.md"),
                    path("$outputDir/amp/macrel/sample_2_short/README.md"),
                    path("$outputDir/amp/macrel/sample_2_long/README.md"),
                    path("$outputDir/amp/macrel/sample_1_short/sample_1_short_log.txt"),
                    path("$outputDir/amp/macrel/sample_2_short/sample_2_short_log.txt"),
                    path("$outputDir/amp/macrel/sample_2_long/sample_2_long_log.txt")
                ).match("macrel") },

                // ampcombi
                { assert new File("$outputDir/reports/ampcombi/ampcombi_complete_summary.tsv").exists() }, // check again with new ampcombi version, if md5 check is possible

                // DeepARG
                { assert snapshot(
                    path("$outputDir/arg/deeparg/sample_1_short/sample_1_short.align.daa.tsv"),
                    path("$outputDir/arg/deeparg/sample_2_short/sample_2_short.align.daa.tsv"),
                    path("$outputDir/arg/deeparg/sample_2_long/sample_2_long.align.daa.tsv"),
                    path("$outputDir/arg/deeparg/sample_1_short/sample_1_short.mapping.ARG"),
                    path("$outputDir/arg/deeparg/sample_2_short/sample_2_short.mapping.ARG"),
                    path("$outputDir/arg/deeparg/sample_2_long/sample_2_long.mapping.ARG")
                ).match("deeparg_tsv_ARG") },
                { assert file("$outputDir/arg/deeparg/sample_1_short/sample_1_short.align.daa").name },
                { assert file("$outputDir/arg/deeparg/sample_2_short/sample_2_short.align.daa").name },
                { assert file("$outputDir/arg/deeparg/sample_2_long/sample_2_long.align.daa").name },
                { assert path("$outputDir/arg/deeparg/sample_1_short/sample_1_short.mapping.potential.ARG").text.contains("#ARG") },
                { assert path("$outputDir/arg/deeparg/sample_2_short/sample_2_short.mapping.potential.ARG").text.contains("#ARG") },
                { assert path("$outputDir/arg/deeparg/sample_2_long/sample_2_long.mapping.potential.ARG").text.contains("#ARG") },

                // ABRicate
                { assert snapshot(
                    path("$outputDir/arg/abricate/sample_1_short/sample_1_short.txt"),
                    path("$outputDir/arg/abricate/sample_2_short/sample_2_short.txt"),
                    path("$outputDir/arg/abricate/sample_2_long/sample_2_long.txt")
                ).match("abricate") },

                // AMRFinderPlus
                { assert snapshot(
                    path("$outputDir/arg/amrfinderplus/sample_1_short/sample_1_short.tsv"),
                    path("$outputDir/arg/amrfinderplus/sample_2_short/sample_2_short.tsv"),
                    path("$outputDir/arg/amrfinderplus/sample_2_long/sample_2_long.tsv")
                ).match("amrfinderplus") },

                // RGI
                { assert snapshot(
                    path("$outputDir/arg/rgi/sample_1_short/sample_1_short.txt"),
                    path("$outputDir/arg/rgi/sample_2_short/sample_2_short.txt"),
                    path("$outputDir/arg/rgi/sample_2_long/sample_2_long.txt")
                ).match("rgi") },

                // fARGene
                { assert snapshot(
                    path("$outputDir/arg/fargene/sample_1_short/class_a/results_summary.txt"),
                    path("$outputDir/arg/fargene/sample_2_short/class_a/results_summary.txt"),
                    path("$outputDir/arg/fargene/sample_2_long/class_a/results_summary.txt"),
                    path("$outputDir/arg/fargene/sample_1_short/class_b_1_2/results_summary.txt"),
                    path("$outputDir/arg/fargene/sample_2_short/class_b_1_2/results_summary.txt"),
                    path("$outputDir/arg/fargene/sample_2_long/class_b_1_2/results_summary.txt"),
                    path("$outputDir/arg/fargene/sample_1_short/fargene_analysis.log"),
                    path("$outputDir/arg/fargene/sample_2_short/fargene_analysis.log"),
                    path("$outputDir/arg/fargene/sample_2_long/fargene_analysis.log")
                ).match("fargene") },

                // hamronization
                { assert snapshot(path("$outputDir/reports/hamronization_summarize/hamronization_combined_report.tsv")).match("hamronization_summarize") },
            )
        }
    }
}
